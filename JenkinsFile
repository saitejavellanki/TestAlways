pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'tejvellank9362/testalways'
    }
    
    stages {
        stage('Pull Image') {
            steps {
                bat "docker pull ${DOCKER_IMAGE}"
            }
        }
        
        stage('Run Container') {
            steps {
                // Use proper port mapping (80 is standard HTTP port)
                bat """
                    docker run -d ^
                        --name my-container ^
                        -p 8089:80 ^
                        ${DOCKER_IMAGE}
                """
            }
        }
        
        stage('Test') {
            steps {
                // Use PowerShell's Start-Sleep instead of timeout command
                bat 'powershell -Command "Start-Sleep -Seconds 10"'
                
                // Verify container is running and healthy
                bat '''
                    docker ps --filter name=my-container --format "{{.Status}}"
                    
                    REM Test if service is responding
                    powershell -Command "try { ^
                        $response = Invoke-WebRequest -Uri http://localhost:8085 -UseBasicParsing; ^
                        if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } ^
                    } catch { exit 1 }"
                '''
            }
        }
    }
    
    post {
        always {
            // Clean up container regardless of pipeline outcome
            bat """
                docker stop my-container || exit /b 0
                docker rm my-container || exit /b 0
            """
        }
    }
}